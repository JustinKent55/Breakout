//------------------------------------------------------------------
//
// This function performs the one-time game initialization.
// Called from Game.js (using modernizr.js) in the yepnope.addPrefix() after all
// javascript file have loaded.
GAME.initialize = (function (images, paddle, ball, bricks, input, text, lives, random, particles) {
	'use strict';

	var canvas = document.getElementById('canvas-main'),
		BORDERSIZE = 50; //pixles, from the background walls
	
	GAME.myKeyboard = input.Keyboard();
	GAME.boundry.left = BORDERSIZE;
	GAME.boundry.right = canvas.width - BORDERSIZE; 
	GAME.boundry.upper = 0 + BORDERSIZE;
	GAME.boundry.lower = canvas.height;
	GAME.myScore = 0;
	GAME.livesRemaining = 3;
	GAME.countdownTime = 3000;
	GAME.newBallInterval = 100;
	
	return function() {
		console.log('game initializing...');
		
		GAME.countdownText = text.initialize( {
			text: 3,
			font: '200px Arial, sans-serif',
			fill: 'rgba(195, 195, 195, 1)',
			stroke: 'rgba(255, 255, 255, 1)',
			pos: {x : 440, y : 300},
			rotation: 0
		} );
		
		GAME.gameOverText  = text.initialize( {
			text: 'Game Over',
			font: '155px Arial, sans-serif',
			fill: 'rgba(195, 195, 195, 1)',
			stroke: 'rgba(255, 255, 255, 1)',
			pos: {x : 95, y : 430},
			rotation: 0
		} );
		
		GAME.myScoreText  = text.initialize( {
			text: 'Score: ',
			font: '20px Arial, sans-serif',
			fill: 'rgba(195, 195, 195, 1)',
			stroke: 'rgba(255, 255, 255, 1)',
			pos: {x : 52, y : 580},
			rotation: 0,
			default: {text: 'Score: ',
					  font: '20px Arial, sans-serif', 
					  fill: 'rgba(195, 195, 195, 1)', 
					  stroke: 'rgba(255, 255, 255, 1)', 
					  pos: {x: 52, y: 580}}
		} );
		
		String.fromCharCode(13);
		
		GAME.myNewText = text.initialize( {
			text: 'New',
			font: '125px Arial, sans-serif',
			fill: 'rgba(195, 195, 195, 1)',
			stroke: 'rgba(255, 255, 255, 1)',
			pos: {x : 365, y : 60},
			rotation: 0
		} );
		
		GAME.myHighScoreText = text.initialize( {
			text: 'High Score:',
			font: '125px Arial, sans-serif',
			fill: 'rgba(195, 195, 195, 1)',
			stroke: 'rgba(255, 255, 255, 1)',
			pos: {x : 60, y : 190},
			rotation: 0
		} );
		
		//Create the lives object
		GAME.myLives = lives.initialize( {
			image: images['images/paddle.png'],
			lives: [],
			width: 25, height: 15,
			starting: {x: 930, y: 590},
			pitch: {x: 5, y: 5},
			rotation: 0
		} );
		
		//Create the background
		GAME.background = ( {
			image: images['images/gameBackground.png'],
			width: 1000, height: 600,
			center: {x: 500, y: 300},
			rotation: 0
		} );

		//Create a paddle object
		GAME.myPaddle = paddle.initialize( {
			image: images['images/paddle.png'],
			width: 100, height: 15,
			center: {x: canvas.width/2 , y: canvas.height - BORDERSIZE},
			speed: 0.45,
			default: {x: canvas.width/2 , y: canvas.height - BORDERSIZE,
					  width: 80, height: 15, speed: 0.35},
			rotation: 0
		} );
		
		//Create the bricks object
		GAME.myBricks = bricks.initialize( {
			topImage: images['images/greenBrick.png'],
			upperimage: images['images/blueBrick.png'],
			lowerImage: images['images/orangeBrick.png'],
			bottomImage: images['images/yellowBrick.png'],
			bricks: [],
			width: 63, height: 20,
			starting: {x: 55, y: 150},
			pitch: {x: 1, y: 1},
			rotation: 0
		} );
		
		// One particle system for the fire particles
		GAME.myParticles = particles.initialize( {
			image : images['images/starBlue.png'],
			speed: {mean: 3, stdev: 2},
			lifetime: {mean: 1.25, stdev: 0.25}
		} );
		
		//Initialize the bricks
		//**UPDATE: Bricks are now being generated by GAME.reinitialize from Menu
		//GAME.myBricks.generate();
		
		//Initialize with one ball object to start with
		GAME.myBall = ball.initialize();

		// Create the keyboard input handler and register the keyboard commands
		GAME.myKeyboard.registerCommand(KeyEvent.DOM_VK_LEFT, GAME.myPaddle.moveLeft);
		GAME.myKeyboard.registerCommand(KeyEvent.DOM_VK_RIGHT, GAME.myPaddle.moveRight);
		
		GAME.game.initialize();
		
	};
}(GAME.images, GAME.paddle, GAME.ball, GAME.bricks, GAME.input, GAME.text, GAME.lives, GAME.random, GAME.particleSystem));
